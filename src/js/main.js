/*
	Problem 1:
  - Multiples of 3 or 5
  
  Description:
  - If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

*/

//console.log(getMultiples());

function getMultiples(){
	let sum = 0;
	for(let i = 1; i <= 1000 ; i++){
  	if( i % 3 == 0 || i % 5 == 0) sum+= i;
  }
  return sum;
}

/* 
	Problem 2:
  - Even Fibonacci numbers
  
  Description:
  - Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

//printFibonacciNumbers();

function printFibonacciNumbers() {
  let sumEvenValues = 0;

  let i = 1;
  while (evenFibonacciNumbers(i + 1) <= 4000000) {
    let result = evenFibonacciNumbers(i + 1);
    console.log(result);
    if (result % 2 === 0) sumEvenValues += result;
    i++;
  }
  console.log('Sum of the even-valued terms = ' + sumEvenValues);
}

function evenFibonacciNumbers(number) {
  if (number === 0) {
    return 0;
  } else if (number === 1) {
    return 1;
  } else {
    return evenFibonacciNumbers(number - 1) + evenFibonacciNumbers(number - 2);
  }
}


/*
	Problem 3:
  - Largest prime factor
  
  Description:
  - The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/
console.log('The largest prime factor of the number 13195 is = ' + largestPrimeFactor(13195));

function largestPrimeFactor(number){
let primeFactors = [];
	for(let i = 1; i <= number ; i++){
  	if( isPrimeNumber(i) ){
    	if( number % i === 0) primeFactors.push(i);
    }
  }
  return primeFactors.pop();
}

function isPrimeNumber(number){
	if( number === 0 || number === 1 || number === 4) return false; 
  for(let x = 2 ; x < number / 2 ; x++){
  	if(number % x === 0) return false;
  }
  return true;
}
